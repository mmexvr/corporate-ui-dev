/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface AppNavigation {}
  interface AppRoot {}
  interface CContent {}
  interface CFooter {
    /**
    * Set footer links
    */
    'items': any;
    /**
    * Add social media icons
    */
    'socialItems': any;
    /**
    * Change default copyright text
    */
    'text': string;
    /**
    * Per default, this will inherit the value from c-theme name property
    */
    'theme': string;
  }
  interface CGlobal {}
  interface CHeader {
    /**
    * Header links that will be placed in the top right part of the header
    */
    'items': any;
    /**
    * Short name will be displayed in the top-centered of the header on mobile mode
    */
    'shortName': string;
    /**
    * The site name will be displayed on the right hand side of the logotype on desktop mode
    */
    'siteName': string;
    /**
    * A link that will be applied to the site-name
    */
    'siteUrl': string;
    /**
    * Per default, this will inherit the value from c-theme name property
    */
    'theme': string;
  }
  interface CNavigation {
    /**
    * Used to show a text in front of generated items on desktop and add a describing text for navigating back in mobile mode for sub navigation
    */
    'caption': string;
    /**
    * Set the orientation for the navigation (vertical or horisontal). The default is horisontal navigation.
    */
    'orientation': string;
    /**
    * Option to disable sticky feature
    */
    'sticky': boolean;
    /**
    * Used to dynamically connect current node to a parent item in mobile mode interaction
    */
    'target': string;
    /**
    * Per default, this will inherit the value from c-theme name property
    */
    'theme': string;
  }
  interface CTheme {
    /**
    * By setting this to true bootstrap classes will be accessable globally
    */
    'global': boolean;
    /**
    * Set the brand name that will set the theme styling for the page.
    */
    'name': string;
  }
  interface VHome {}
  interface VNone {}
  interface VProfile {}
}

declare global {


  interface HTMLAppNavigationElement extends Components.AppNavigation, HTMLStencilElement {}
  var HTMLAppNavigationElement: {
    prototype: HTMLAppNavigationElement;
    new (): HTMLAppNavigationElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLCContentElement extends Components.CContent, HTMLStencilElement {}
  var HTMLCContentElement: {
    prototype: HTMLCContentElement;
    new (): HTMLCContentElement;
  };

  interface HTMLCFooterElement extends Components.CFooter, HTMLStencilElement {}
  var HTMLCFooterElement: {
    prototype: HTMLCFooterElement;
    new (): HTMLCFooterElement;
  };

  interface HTMLCGlobalElement extends Components.CGlobal, HTMLStencilElement {}
  var HTMLCGlobalElement: {
    prototype: HTMLCGlobalElement;
    new (): HTMLCGlobalElement;
  };

  interface HTMLCHeaderElement extends Components.CHeader, HTMLStencilElement {}
  var HTMLCHeaderElement: {
    prototype: HTMLCHeaderElement;
    new (): HTMLCHeaderElement;
  };

  interface HTMLCNavigationElement extends Components.CNavigation, HTMLStencilElement {}
  var HTMLCNavigationElement: {
    prototype: HTMLCNavigationElement;
    new (): HTMLCNavigationElement;
  };

  interface HTMLCThemeElement extends Components.CTheme, HTMLStencilElement {}
  var HTMLCThemeElement: {
    prototype: HTMLCThemeElement;
    new (): HTMLCThemeElement;
  };

  interface HTMLVHomeElement extends Components.VHome, HTMLStencilElement {}
  var HTMLVHomeElement: {
    prototype: HTMLVHomeElement;
    new (): HTMLVHomeElement;
  };

  interface HTMLVNoneElement extends Components.VNone, HTMLStencilElement {}
  var HTMLVNoneElement: {
    prototype: HTMLVNoneElement;
    new (): HTMLVNoneElement;
  };

  interface HTMLVProfileElement extends Components.VProfile, HTMLStencilElement {}
  var HTMLVProfileElement: {
    prototype: HTMLVProfileElement;
    new (): HTMLVProfileElement;
  };
  interface HTMLElementTagNameMap {
    'app-navigation': HTMLAppNavigationElement;
    'app-root': HTMLAppRootElement;
    'c-content': HTMLCContentElement;
    'c-footer': HTMLCFooterElement;
    'c-global': HTMLCGlobalElement;
    'c-header': HTMLCHeaderElement;
    'c-navigation': HTMLCNavigationElement;
    'c-theme': HTMLCThemeElement;
    'v-home': HTMLVHomeElement;
    'v-none': HTMLVNoneElement;
    'v-profile': HTMLVProfileElement;
  }
}

declare namespace LocalJSX {
  interface AppNavigation {}
  interface AppRoot {}
  interface CContent {}
  interface CFooter {
    /**
    * Set footer links
    */
    'items'?: any;
    /**
    * Add social media icons
    */
    'socialItems'?: any;
    /**
    * Change default copyright text
    */
    'text'?: string;
    /**
    * Per default, this will inherit the value from c-theme name property
    */
    'theme'?: string;
  }
  interface CGlobal {}
  interface CHeader {
    /**
    * Header links that will be placed in the top right part of the header
    */
    'items'?: any;
    /**
    * Short name will be displayed in the top-centered of the header on mobile mode
    */
    'shortName'?: string;
    /**
    * The site name will be displayed on the right hand side of the logotype on desktop mode
    */
    'siteName'?: string;
    /**
    * A link that will be applied to the site-name
    */
    'siteUrl'?: string;
    /**
    * Per default, this will inherit the value from c-theme name property
    */
    'theme'?: string;
  }
  interface CNavigation {
    /**
    * Used to show a text in front of generated items on desktop and add a describing text for navigating back in mobile mode for sub navigation
    */
    'caption'?: string;
    /**
    * Set the orientation for the navigation (vertical or horisontal). The default is horisontal navigation.
    */
    'orientation'?: string;
    /**
    * Option to disable sticky feature
    */
    'sticky'?: boolean;
    /**
    * Used to dynamically connect current node to a parent item in mobile mode interaction
    */
    'target'?: string;
    /**
    * Per default, this will inherit the value from c-theme name property
    */
    'theme'?: string;
  }
  interface CTheme {
    /**
    * By setting this to true bootstrap classes will be accessable globally
    */
    'global'?: boolean;
    /**
    * Set the brand name that will set the theme styling for the page.
    */
    'name'?: string;
  }
  interface VHome {}
  interface VNone {}
  interface VProfile {}

  interface IntrinsicElements {
    'app-navigation': AppNavigation;
    'app-root': AppRoot;
    'c-content': CContent;
    'c-footer': CFooter;
    'c-global': CGlobal;
    'c-header': CHeader;
    'c-navigation': CNavigation;
    'c-theme': CTheme;
    'v-home': VHome;
    'v-none': VNone;
    'v-profile': VProfile;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-navigation': LocalJSX.AppNavigation & JSXBase.HTMLAttributes<HTMLAppNavigationElement>;
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'c-content': LocalJSX.CContent & JSXBase.HTMLAttributes<HTMLCContentElement>;
      'c-footer': LocalJSX.CFooter & JSXBase.HTMLAttributes<HTMLCFooterElement>;
      'c-global': LocalJSX.CGlobal & JSXBase.HTMLAttributes<HTMLCGlobalElement>;
      'c-header': LocalJSX.CHeader & JSXBase.HTMLAttributes<HTMLCHeaderElement>;
      'c-navigation': LocalJSX.CNavigation & JSXBase.HTMLAttributes<HTMLCNavigationElement>;
      'c-theme': LocalJSX.CTheme & JSXBase.HTMLAttributes<HTMLCThemeElement>;
      'v-home': LocalJSX.VHome & JSXBase.HTMLAttributes<HTMLVHomeElement>;
      'v-none': LocalJSX.VNone & JSXBase.HTMLAttributes<HTMLVNoneElement>;
      'v-profile': LocalJSX.VProfile & JSXBase.HTMLAttributes<HTMLVProfileElement>;
    }
  }
}


